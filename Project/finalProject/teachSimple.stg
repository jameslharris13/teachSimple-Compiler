enterProgram(v) ::= "var <v> = function <v>() {"
exitProgram() ::= <<}>>

globals(values) ::= <<var <values; separator=", "> ;>>

output(v) ::= <<console.log(<v; separator="+">);>>
emptyOutput() ::= <<console.log();>>

input (v) ::= <<readln(<v>);>>
emptyInput() ::= <<readln();>>

procCall(v, values) ::= <<<v>(<values; separator=", ">) ;>> 

enterIfStatement(v) ::= "if( <v> ) {"
exitIfStatement() ::= "}"

enterForLoop(variable, from, to, symbol) ::= <<for (<variable>) = <from>; <variable> <symbol> <to>; <variable>++) {>>
exitForLoop() ::= "}"

enterForLoopDown(variable, from, to, symbol) ::= <<for (<variable> = <from>; <variable> <symbol> <to>; <variable>--) {>>
exitForLoopDown() ::= "}"

enterWhileLoop(variable, symbol, w) ::= "while (<variable> <symbol> <w>) {"
exitWhileLoop() ::= "}"

variableDeclaration(variables) ::= <<var <variables; separator=", ">;>>
variableAssignmentDec(variable, values) ::= <<var <variable> = <values>;>> 

assignmentStatement(v, w) ::= "<v> = <w>;"
constantDeclaration(identifier, value) ::= "const <identifier> = <value>" 

enterFunctionDeclaration(identifier, v) ::= <<function <identifier> (<v; separator=", ">) {>>
exitFuncDeclaration() ::= <<"}">>



comment(v) ::= "//<v>"